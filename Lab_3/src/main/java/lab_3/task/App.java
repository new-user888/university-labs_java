/*
 * This source file was generated by the Gradle 'init' task
 */
package lab_3.task;

import java.util.Arrays;
import java.util.Comparator;

/**
 * Main application class for working with NPC objects.
 */
public class App {
    public static void main(String[] args) {
        // Create an array of NPC objects with sample data
        NPC[] npcs = new NPC[] {
            new NPC("John", 30, "Merchant", 100, false),
            new NPC("Alice", 25, "Guard", 80, true),
            new NPC("Bob", 40, "Villager", 60, false),
            new NPC("Eve", 35, "Bandit", 90, true),
            new NPC("Sam", 28, "Healer", 120, false)
        };

        // Sort by age (ascending), then by health (descending) if age is equal
        Arrays.sort(npcs, Comparator
            .comparingInt(NPC::getAge)
            .thenComparing(Comparator.comparingInt(NPC::getHealth).reversed())
        );
        System.out.println("Sorted by age (ascending), then health (descending):");
        for (NPC npc : npcs) {
            System.out.println(npc.getName() + " - Age: " + npc.getAge() + ", Health: " + npc.getHealth());
        }

        // Define an NPC to search for (identical object)
        NPC searchNpc = new NPC("Alice", 25, "Guard", 80, true);

        // Find identical NPC in the array
        NPC foundNpc = null;
        for (NPC npc : npcs) {
            if (npc.getName().equals(searchNpc.getName()) &&
                npc.getAge() == searchNpc.getAge() &&
                npc.getRole().equals(searchNpc.getRole()) &&
                npc.getHealth() == searchNpc.getHealth() &&
                npc.isHostile() == searchNpc.isHostile()) {
                foundNpc = npc;
                break;
            }
        }

        if (foundNpc != null) {
            System.out.println("\nIdentical NPC found: " + foundNpc.getName());
        } else {
            System.out.println("\nIdentical NPC not found.");
        }
    }
}